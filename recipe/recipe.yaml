schema_version: 1

context:
  # ensure mpi is defined (needed for conda-smithy recipe-lint)
  # prioritize nompi variant via build number
  name: amrex
  version: "25.09"
  build: 0
  mpi: ${{ mpi or "nompi" }}  # is this still needed?
  mpi_prefix: ${{ "nompi" if mpi == "nompi" else "mpi_" + mpi }}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/AMReX-Codes/amrex/archive/refs/tags/${{ version }}.tar.gz
  sha256: 08f7dcda3daffba90c4cf90ad371557feb70ea6c0e4fa51ab716e24beec12c79
  patches:
    # fix SIMD namespaces
    - 4600.patch
    # fix SIMD cvt for masks on macOS/Windows
    - 4607.patch

build:
  # add build string so packages can depend on
  # mpi or nompi variants
  # dependencies:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  number: ${{ build | int + 100 if mpi == "nompi" and amrex_precision == "dp" else build }}
  string: ${{ mpi_prefix }}_${{ amrex_precision }}_h${{ hash }}_${{ build | int + 100 if mpi == "nompi" and amrex_precision == "dp" else build }}

requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ stdlib("c") }}
    - ${{ compiler('cxx') }}
    - if: unix
      then: make
    - if: win
      then:
        - clang
        - lld
        - llvm-openmp
        - ninja
    - if: linux
      then: libgomp
    - if: osx
      then: llvm-openmp
    - cmake
    - pkg-config
    # In OpenMPI, the compiler wrappers are binaries and the wrappers in build
    # can use host libraries by adding OPAL_PREFIX and in mpich, compiler
    # wrappers are bash scripts and wrappers in build can't use host libraries.
    - if: "mpi == 'openmpi' and (build_platform != target_platform)"
      then: openmpi

  host:
    - if: "mpi != 'nompi'"
      then: ${{ mpi }}
    - fftw
    - vir-simd
  run:
    - if: "mpi != 'nompi'"
      then:
        - ${{ mpi }}
    - if: osx
      then: libcxx
  run_exports:
    # strict runtime dependency on build-time MPI flavor and DP/SP variant
    - ${{ name }} * ${{ mpi_prefix }}_${{ amrex_precision }}_*
    # Releases are not (yet) compatible:
    # There is no ABI compatibility check or guarantee between AMReX releases.
    - amrex ==${{ version }}

tests:
  - package_contents:
      lib:
        - if: unix
          then: amrex
        - amrex_1d
        - amrex_2d
        - amrex_3d
      include:
        - AMReX.H
      files:
        - ${{ "Library" if win else "lib" }}/cmake/${{ "AMReX/" if unix }}AMReXConfig.cmake

about:
  license: BSD-3-Clause
  license_file: LICENSE
  summary: A software framework for massively parallel, block-structured adaptive mesh refinement (AMR) applications
  description: |
    AMReX is a software framework containing all the functionality to write
    massively parallel, block-structured adaptive mesh refinement (AMR)
    applications. AMReX is an Established Project of the High Performance Software Foundation.
  homepage: https://amrex-codes.github.io/amrex/
  repository: https://github.com/AMReX-Codes/amrex
  documentation: https://amrex-codes.github.io/amrex/docs_html/

extra:
  recipe-maintainers:
    - atmyers
    - ax3l
    - WeiqunZhang
